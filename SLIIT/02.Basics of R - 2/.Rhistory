q()
print(100:150)
#To get the working directory
getwd()
#setwd(--include directory here--)
#2.To get the working directory
getwd()
#5.get help
?solve
#6.Documentation about data frame
help("data.frame")
600%%2
#7.Scaler Operators
2+8
900-76
50*6
50/4
4^2
4**2
600%%2
600%%2
4**2
600%%r
600%%2
isTRUE(x==y)
#8.Logical operators
x = 5
y = -4
isTRUE(x==y)
isTRUE(x>Y)
y = -4
#Local variables declared with =
x = 5
isTRUE(x>Y)
isTRUE(x>y)
isTRUE(x<=y)
isTRUE(x != y)
isTRUE(!x)
isTRUE(x || 0)
isTRUE(x && 0)
isTRUE(x || NOT)
isTRUE(!(x<Y)
isTRUE(!(x<Y))
isTRUE(!x<y)
istRUE(!x)
isTRUE(!x)
isTRUE(x || NOT)
isTRUE(0 || NOT)
isTRUE(0 || NOT)
isTRUE(x || 0)
#Global Variable
a<<-5
isTRUE(x && 0)
w
#10.Vector
w<-c(1,2,3,4,)
w
#10.Vector
w<-c(1,2,3,4)
w
class(w)
e<-c("a","b","c")
e
class(e)
e<-c("Ishara","Madusanka")
class(e)
d<-c("Ishara","Madusanka")
class(d)
class(e[0])
e[0]
e[1]
e[2]
e<-c("a","b","c")
e[2]
gender
#11.Factor
gender<-c(0,1,0,1,0,1)
gender
Gender
Gender<-factor(gender,c(0,1),c("Female","Male"))
Gender
class(Gender)
class(Gender)
Gender
#11.Factor - use to categorize data
gender<-c(0,1,0,1,0,1,01)
Gender<-factor(gender,c(0,1,01),c("Female","Male","Dinidu"))
Gender
#11.Factor - use to categorize data
gender<-c(0,1,0,1,0,1,01)
Gender<-factor(gender,c(0,1,01),c("Female","Male","Dinidu"))
Gender
#11.Factor - use to categorize data
gender<-c(0,1,0,1,0,1,2)
Gender<-factor(gender,c(0,1,2),c("Female","Male","Dinidu"))
Gender
q<-"Green"
q[1]
r<-21
p
#12.List
p<-c(1,2,3)
p
q
r
Data <-list(p,q,r)
Data
class(Data)
#13.Matrix
matrix1<-matrix(c(1,2,3,4),nrow = 2,ncol = 2 ,byrow=TRUE )
matrix1
class(matrix1)
matrix2
matrix2<-matrix(c(1,2,3,4),nrow = 2,ncol = 2,byrow = FALSE)
matrix2
#14.Data Frame
height<-c(67,89,43,90)
weight<-c(56,34,49,67)
#Data in height and weight must have same length
data_set<-data.frame(height,weight)
data_set
class(data_set)
name<-("Tera","Sehan")
type<-("Bijjakot","Kathaya")
name<-(0,1)
#Questions
#01
function_q1(a,b,c){
x1 <- (-b + sqrt(b^2 - (4*a*c))/2*a
function_q1(3,2,1)
x2 <- (-b - sqrt(b^2 - (4*a*c)))/2*a
function_q1(a,b,c){
function_q1(a,b,c){
function_q1(a,b,c){
}
x2 = (-b - sqrt(b^2 - (4*a*c)))/2*a
#Questions
#01
function_q1(a,b,c){
x1 = (-b + sqrt(b^2 - (4*a*c)))/2*a
function_q1(a,b,c){
fun_q1(a,b,c){
fun_q2(k){
fun_q2(k){
fun_q1 <- function(a,b,c){
x1 = (-b + sqrt(b^2 - (4*a*c)))/2*a
x2 = (-b - sqrt(b^2 - (4*a*c)))/2*a
}
fun_q1(3,2,1)
fun_q2<- function(k){
if(k%%3 == 0){
print("Divisible")
}
else{
print("Not divisible")
}
}
fun_q2(6)
vect <- c(1:10)
vect
fun_q2<- function(k){
vect <- c(1:k);
for(i in vect){
if(i%%3 == 0){
print("Divisible")
}
else{
print("Not divisible")
}
}
}
fun_q2(6)
fun_q2<- function(k){
vect <- c(1:k);
for(i in vect){
if(i%%3 == 0){
print("$i = Divisible")
}
else{
print("$i = Not divisible")
}
}
}
fun_q2(6)
fun_q2<- function(k){
vect <- c(1:k);
for(i in vect){
if(i%%3 == 0){
print(i + " = Divisible")
}
else{
print(i + " = Not divisible")
}
}
}
fun_q2(6)
fun_q2<- function(k){
vect <- c(1:k);
for(i in vect){
if(i%%3 == 0){
print(i," = Divisible")
}
else{
print(i," = Not divisible")
}
}
}
fun_q2(6)
fun_q2<- function(k){
vect <- c(1:k);
for(i in vect){
if(i%%3 == 0){
print("Divisible")
}
else{
print("Not divisible")
}
}
}
fun_q2(9)
fun_q2(50)
check<- c(1,5,6,7,2);
max = check[0]
for(i in check){
if(check[i] > max){
max = c[i]
}
}
check<- c(1,5,6,7,2);
max = check[1]
for(i in check){
if(check[i] > max){
max = c[i]
}
}
check<- c(1,5,6,7,2);
max <<- check[1]
source("C:/Users/ishar/Videos/SLIIT/2.PS/3.Labs/Lab 2/practical2.R")
check<- c(1,5,6,7,2);
max <- check[1]
for(i in check){
if(check[i] > max){
max <- check[i]
}
}
check<- c(1,5,6,7,2);
max <- 0
maxIndex <- 0
for(i in check){
if(check[i] > max){
max <- check[i]
maxIndex = i;
}
}
check<- c(1,5,6,7,2);
max <- 0
maxIndex <- 0
for(i in check){
print(i)
}
check<- c(1,5,6,7,2);
max <- 0
Index <- 0
for(i in check){
if(check[i] > max){
max <- check[i]
Index = i;
}
}
check<- c(1,5,6,7,2);
max <- c[1]
max
max
#03
check<- c(1,5,6,7,2);
max <- check[1]
max
Index <- 0
for(i in check){
if(check[i] > max){
max <- check[i]
Index = i;
}
}
check<- c(1,5,6,7,2);
max <- check[1]
Index <- 0
for(i in check){
if(check[i] > max){
max = check[i]
Index = i;
}
}
#03
check<- c(1,5,6,7,2);
max <- check[1]
Index <- 0
for(i in check){
if(check[i] > max){
max = check[i]
Index = i;
}
}
Index
Index <- 0
Index
for(i in check){
if(check[i] > max){
max = check[i]
Index = i;
}
}
Index
#Q7
which.max(check)
check[which.max(check)]
check<- c(1,5,6,7,2);
max <- check[1]
Index <- 1
for(i in  check){
print(i)
}
check<- c(1,5,6,7,2);
max <- check[1]
Index <- 1
for(i in  check){
if(check[i] > max){
max = check[i]
Index = i;
}
}
check<- c(1,5,6,7,2);
max <- check[1]
Index <- 1
for(i in  check){
if(max< check[i]){
max = check[i]
Index = i;
}
}
max< check[i]
check[1]
check<- c(1,5,6,7,2);
max <- 0
Index <- 0
for(i in  check){
if(max< check[i]){
max = check[i]
Index = i;
}
}
check<- c(1,5,6,7,2);
max <- 0
Index <- 0
for(i in  1:length(check)){
if(max< check[i]){
max = check[i]
Index = i;
}
}
check<- c(1,5,6,7,2);
max <- check[1]
Index <- 1
#this one should be length(check). cannot use i in check
for(i in  1:length(check)){
if(max< check[i]){
max = check[i]
Index = i;
}
}
Index
